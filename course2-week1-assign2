Plotting Weather Patterns
  
Assignment 2
Before working on this assignment please read these instructions fully. In the submission area, you will notice that you can click the link to Preview the Grading for each step of the assignment. This is the criteria that will be used for peer grading. Please familiarize yourself with the criteria before beginning the assignment.

An NOAA dataset has been stored in the file data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv. This is the dataset to use for this assignment. Note: The data for this assignment comes from a subset of The National Centers for Environmental Information (NCEI) Daily Global Historical Climatology Network (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.

Each row in the assignment datafile corresponds to a single observation.

The following variables are provided to you:

id : station identification code
date : date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012)
element : indicator of element type
TMAX : Maximum temperature (tenths of degrees C)
TMIN : Minimum temperature (tenths of degrees C)
value : data value for element (tenths of degrees C)
For this assignment, you must:

Read the documentation and familiarize yourself with the dataset, then write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day should be shaded.
Overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.
Watch out for leap days (i.e. February 29th), it is reasonable to remove these points from the dataset for the purpose of this visualization.
Make the visual nice! Leverage principles from the first module in this course when developing your solution. Consider issues such as legends, labels, and chart junk.
The data you have been given is near Ann Arbor, Michigan, United States, and the stations the data comes from are shown on the map below.

import matplotlib.pyplot as plt
import mplleaflet
import pandas as pd

def leaflet_plot_stations(binsize, hashid):

    df = pd.read_csv('data/C2A2_data/BinSize_d{}.csv'.format(binsize))

    station_locations_by_hash = df[df['hash'] == hashid]

    lons = station_locations_by_hash['LONGITUDE'].tolist()
    lats = station_locations_by_hash['LATITUDE'].tolist()

    plt.figure(figsize=(8,8))

    plt.scatter(lons, lats, c='r', alpha=0.7, s=200)

    return mplleaflet.display()

leaflet_plot_stations(400,'fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89')



# My code
%matplotlib notebook

import matplotlib as mpl
import matplotlib.pyplot as plt
import mplleaflet
import calendar
import pandas as pd
from datetime import datetime as dt
# plt.plot?

data = 'data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv'

df = pd.read_csv(data)

# Defining my functions to handle the heavy lifting

def get_tmin(df):
    """Finds the min values from a dataframe and returns a new dataframe.
    
    Parameters:
        df: The `dataframe` being evaluated.
    
    Returns:
        The `min dataframe`.
    """
    
        # Gets tmin from the data.csv
    tmin_df = df.where(df['Element'] == 'TMIN').dropna()
    tmin_df = tmin_df.groupby('Date').min()
    tmin_df.reset_index(inplace=True)
    
        # Cleans the dataframe
    tmin_df = tmin_df[['Date', 'Data_Value']]
    tmin_df['Data_Value'] = tmin_df['Data_Value']/10
    
        # Converts Date to datetime
    tmin_df['Date'] = pd.to_datetime(tmin_df['Date'])
    
        # Adds a Day column to evaluate
    tmin_df['Day'] = tmin_df['Date'].dt.strftime('%j')
    tmin_df.sort_values('Day', inplace=True)
    tmin_df['Year'] = tmin_df['Date'].dt.strftime('%Y')
    tmin_df['Day'] = pd.to_numeric(tmin_df['Day'])
    
    return tmin_df
    

def get_tmax(df):
    """Finds the max values from a dataframe and returns a new dataframe.
    
    Parameters:
        df: The `dataframe` being evaluated.
    
    Returns:
        The `max dataframe`.
    """    
    
        # Gets tmin from the data
    tmax_df = df.where(df['Element'] == 'TMAX').dropna()
    tmax_df = tmax_df.groupby('Date').min()
    tmax_df.reset_index(inplace=True)
    
        # Cleans the dataframe
    tmax_df = tmax_df[['Date', 'Data_Value']]
    tmax_df['Data_Value'] = tmax_df['Data_Value']/10
    
        # Converts Date to datetime
    tmax_df['Date'] = pd.to_datetime(tmax_df['Date'])
    
        # Adds a Day column to evaluate
    tmax_df['Day'] = tmax_df['Date'].dt.strftime('%j')
    tmax_df.sort_values('Day', inplace=True)
    tmax_df['Year'] = tmax_df['Date'].dt.strftime('%Y')
    tmax_df['Day'] = pd.to_numeric(tmax_df['Day'])

    return tmax_df
    
    
def drop_leapy(df, year):
    """Locates the leap year day and removes it from a temporary dataframe adjusting the day of year -1 afterwards.
    
    Parameters:
        df: The `dataframe` being evaluated.
        year: The confirmed leap year (`int`).
    
    Returns:
        The temporary adjusted `dataframe`.
    """
    
        # Locates day 60 aka February 29th and dropping it
    day_to_drop = df.loc[df['Date'] == f'{year}-02-29']
    df = df.drop(day_to_drop.index)

        # Finds the days before and after day 60 aka Feb 29th 
    df_lt60 = df['Day'].where(df['Day'] < 60).dropna()
    df_gt60 = df['Day'].where(df['Day'] > 60).dropna().astype(int).subtract(1)

        # Appends the dataframes together len must be equal to 365
    insert_days = df_lt60.append(df_ge60)

        # Replaces the day of year in the max or min df with the right day of year
    df['Day'] = insert_days
    
    return df


min_2012 = get_tmin(df).where(get_tmin(df)['Year'].astype(int) == 2012).dropna()
max_2012 = get_tmin(df).where(get_tmin(df)['Year'].astype(int) == 2012).dropna()

min_2008 = get_tmin(df).where(get_tmin(df)['Year'].astype(int) == 2008).dropna()
max_2008 = get_tmin(df).where(get_tmin(df)['Year'].astype(int) == 2008).dropna()
